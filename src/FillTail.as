package{		import flash.display.Graphics;	import flash.geom.Point;		public class FillTail extends Tail{			private var radius:Number;		private var endRadius:Number;		private var decay:Number;		private var color:int;		private var g:Graphics;			private var perp:Point;						// Constructor //		public function FillTail(g:Graphics, length:int=1, radius:Number=10, color:int=0x000000, decay:Number=0.7){			this.g=g;			this.radius=radius;			this.endRadius=radius*decay;			this.decay=decay;			this.color=color;			this.perp = new Point;			super(length);		}				override protected function buildNext(length:int):Tail{			return new FillTail(g, --length, endRadius, color, decay);		}				override public function update(p:Point):void{			super.update(p);			// get a unit vector perpendicular to this segments centerLine			var centerLine:Point = end.subtract(start);			perp.x=-centerLine.y;			perp.y=centerLine.x;			perp.normalize(1); // make it a unit vector		}			override public function draw():void {			g.beginFill(color);			g.drawCircle(start.x,start.y,radius);			g.endFill();			g.beginFill(color);			g.moveTo(start.x+radius*perp.x ,start.y+radius*perp.y);			g.lineTo(end.x+endRadius*perp.x,end.y+endRadius*perp.y);			g.lineTo(end.x-endRadius*perp.x,end.y-endRadius*perp.y);			g.lineTo(start.x-radius*perp.x ,start.y-radius*perp.y);			g.endFill();						if(hasNext()){				next.draw();			}else{				g.beginFill(color);				g.drawCircle(end.x,end.y,endRadius);				g.endFill();			}		}	}}